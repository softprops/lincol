var N=null,E="",T="t",U="u",searchIndex={};
var R=["cfg_if","An insertion-order iterator over a `LinkedHashMap`'s…","Creates an empty linked hash map with the given initial…","entries","option","Returns the value corresponding to the key in the map.","usize","Returns a double-ended iterator visiting all key-value…","values","get_mut","Gets a reference to the entry key","into_iter","to_owned","clone_into","try_from","try_into","borrow_mut","result","type_id","borrow","typeid","next_back","ordering","intoiterator","size_hint","occupiedentry","LinkedHashMap","OccupiedEntry","VacantEntry","IntoIter","levelfilter","setloggererror","metadata","The module path of the message, if it is a `'static` string.","recordbuilder","arguments","module_path","module_path_static","file_static","Returns a new builder.","The verbosity level of the message.","The name of the target of the directive.","metadatabuilder","parselevelerror","partial_cmp","formatter","from_str","LevelFilter","RecordBuilder","Metadata","MetadataBuilder","SetLoggerError","ParseLevelError","yaml_rust","Anchor ID","on_event","scanerror","StreamStart","StreamEnd","DocumentStart","DocumentEnd","marker","scanresult","yaml_rust::emitter","yaml_rust::parser","yaml_rust::scanner","to_string","yaml_rust::yaml","tencoding","tscalarstyle","tokentype","description","EmitError","YamlEmitter","EventReceiver","MarkedEventReceiver","TEncoding","TScalarStyle","TokenType","ScanError","YamlLoader","YamlIter","positions","position","Position","Positions","string"];
searchIndex["cfg_if"]={"doc":"A macro for defining `#[cfg]` if-else statements.","i":[[14,R[0],R[0],"The main macro provided by this crate. See crate…",N,N]],"p":[]};
searchIndex["lincolns"]={"doc":"A JSON Pointer index for line/column information within…","i":[[3,R[84],"lincolns","Line and column position of content in a file",N,N],[12,"line",E,E,0,N],[12,"col",E,E,0,N],[3,R[85],E,"A table of `Position` information",N,N],[4,"Error",E,"Possible errors that may occur while loading content",N,N],[13,"Parse",E,"Failure to parse content",1,N],[13,"Io",E,"Failure to load data",1,N],[13,"Utf8",E,"Failure to read data as utf8 text",1,N],[5,R[46],E,"Load a lookup table of `Position` information from utf8 text",N,[[["s"]],[[R[82]],[R[17],[R[82]]]]]],[5,"from_reader",E,"Load a lookup table of `Position` information from a type…",N,[[["r"]],[[R[82]],[R[17],[R[82]]]]]],[11,"get",E,"Gets a yaml field's position within a document given its…",2,[[["self"],["p"]],[[R[4],[R[83]]],[R[83]]]]],[11,"iter",E,"Returns an iterator over positions",2,[[["self"]]]],[6,"Result",E,E,N,N],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[14],E,E,0,[[[U]],[R[17]]]],[11,R[15],E,E,0,[[],[R[17]]]],[11,R[19],E,E,0,[[["self"]],[T]]],[11,R[16],E,E,0,[[["self"]],[T]]],[11,R[18],E,E,0,[[["self"]],[R[20]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[14],E,E,2,[[[U]],[R[17]]]],[11,R[15],E,E,2,[[],[R[17]]]],[11,R[19],E,E,2,[[["self"]],[T]]],[11,R[16],E,E,2,[[["self"]],[T]]],[11,R[18],E,E,2,[[["self"]],[R[20]]]],[11,R[55],E,E,2,[[["self"],[R[61]],["event"]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[66],E,E,1,[[["self"]],[R[86]]]],[11,R[14],E,E,1,[[[U]],[R[17]]]],[11,R[15],E,E,1,[[],[R[17]]]],[11,R[19],E,E,1,[[["self"]],[T]]],[11,R[16],E,E,1,[[["self"]],[T]]],[11,R[18],E,E,1,[[["self"]],[R[20]]]],[11,"eq",E,E,0,[[["self"],[R[83]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[83]]],["bool"]]],[11,"from",E,E,1,[[[R[56]]],["error"]]],[11,"from",E,E,1,[[["error"]],["error"]]],[11,"from",E,E,1,[[["utf8error"]],["error"]]],[11,"fmt",E,E,1,[[["self"],[R[45]]],[[R[17],["error"]],["error"]]]],[11,"fmt",E,E,1,[[["self"],[R[45]]],[R[17]]]],[11,"fmt",E,E,0,[[["self"],[R[45]]],[R[17]]]]],"p":[[3,R[84]],[4,"Error"],[3,R[85]]]};
searchIndex["linked_hash_map"]={"doc":"A `HashMap` wrapper that holds key-value pairs in…","i":[[3,R[26],"linked_hash_map","A linked hash map.",N,N],[3,"Iter",E,R[1],N,N],[3,"IterMut",E,R[1],N,N],[3,R[29],E,"A consuming insertion-order iterator over a…",N,N],[3,"Entries",E,R[1],N,N],[3,"Keys",E,"An insertion-order iterator over a `LinkedHashMap`'s keys.",N,N],[3,"Values",E,"An insertion-order iterator over a `LinkedHashMap`'s values.",N,N],[3,R[27],E,"A view into a single occupied location in a `LinkedHashMap`.",N,N],[3,R[28],E,"A view into a single empty location in a `LinkedHashMap`.",N,N],[4,"Entry",E,"A view into a single location in a map, which may be…",N,N],[13,"Occupied",E,"An occupied Entry.",0,N],[13,"Vacant",E,"A vacant Entry.",0,N],[11,"new",E,"Creates a linked hash map.",1,[[],["self"]]],[11,"with_capacity",E,R[2],1,[[[R[6]]],["self"]]],[11,"with_hasher",E,R[2],1,[[["s"]],["self"]]],[11,"with_capacity_and_hasher",E,R[2],1,[[["s"],[R[6]]],["self"]]],[11,"reserve",E,"Reserves capacity for at least `additional` more elements…",1,[[["self"],[R[6]]]]],[11,"shrink_to_fit",E,"Shrinks the capacity of the map as much as possible. It…",1,[[["self"]]]],[11,"entry",E,"Gets the given key's corresponding entry in the map for…",1,[[["self"],["k"]],["entry"]]],[11,R[3],E,"Returns an iterator visiting all entries in insertion…",1,[[["self"]],[R[3]]]],[11,"insert",E,"Inserts a key-value pair into the map. If the key already…",1,[[["self"],["k"],["v"]],[R[4]]]],[11,"contains_key",E,"Checks if the map contains the given key.",1,[[["self"],["q"]],["bool"]]],[11,"get",E,R[5],1,[[["self"],["q"]],[[R[4]],["v"]]]],[11,R[9],E,"Returns the mutable reference corresponding to the key in…",1,[[["self"],["q"]],[[R[4]],["v"]]]],[11,"get_refresh",E,R[5],1,[[["self"],["q"]],[[R[4]],["v"]]]],[11,"remove",E,"Removes and returns the value corresponding to the key…",1,[[["self"],["q"]],[R[4]]]],[11,"capacity",E,"Returns the maximum number of key-value pairs the map can…",1,[[["self"]],[R[6]]]],[11,"pop_front",E,"Removes the first entry.",1,[[["self"]],[R[4]]]],[11,"front",E,"Gets the first entry.",1,[[["self"]],[R[4]]]],[11,"pop_back",E,"Removes the last entry.",1,[[["self"]],[R[4]]]],[11,"back",E,"Gets the last entry.",1,[[["self"]],[R[4]]]],[11,"len",E,"Returns the number of key-value pairs in the map.",1,[[["self"]],[R[6]]]],[11,"is_empty",E,"Returns whether the map is currently empty.",1,[[["self"]],["bool"]]],[11,"hasher",E,"Returns a reference to the map's hasher.",1,[[["self"]],["s"]]],[11,"clear",E,"Clears the map of all key-value pairs.",1,[[["self"]]]],[11,"iter",E,R[7],1,[[["self"]],["iter"]]],[11,"iter_mut",E,R[7],1,[[["self"]],["itermut"]]],[11,"keys",E,"Returns a double-ended iterator visiting all key in order…",1,[[["self"]],["keys"]]],[11,R[8],E,"Returns a double-ended iterator visiting all values in…",1,[[["self"]],[R[8]]]],[11,"key",E,"Returns the entry key",0,[[["self"]],["k"]]],[11,"or_insert",E,"Ensures a value is in the entry by inserting the default…",0,[[["v"]],["v"]]],[11,"or_insert_with",E,"Ensures a value is in the entry by inserting the result of…",0,[[["fnonce"]],["v"]]],[11,"key",E,R[10],2,[[["self"]],["k"]]],[11,"get",E,"Gets a reference to the value in the entry.",2,[[["self"]],["v"]]],[11,R[9],E,"Gets a mutable reference to the value in the entry.",2,[[["self"]],["v"]]],[11,"into_mut",E,"Converts the OccupiedEntry into a mutable reference to the…",2,[[],["v"]]],[11,"insert",E,"Sets the value of the entry, and returns the entry's old…",2,[[["self"],["v"]],["v"]]],[11,"remove",E,"Takes the value out of the entry, and returns it",2,[[],["v"]]],[11,"key",E,R[10],3,[[["self"]],["k"]]],[11,"insert",E,"Sets the value of the entry with the VacantEntry's key,…",3,[[["v"]],["v"]]],[11,R[11],E,E,1,[[],["i"]]],[11,R[12],E,E,1,[[["self"]],[T]]],[11,R[13],E,E,1,[[["self"],[T]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[14],E,E,1,[[[U]],[R[17]]]],[11,R[15],E,E,1,[[],[R[17]]]],[11,R[19],E,E,1,[[["self"]],[T]]],[11,R[16],E,E,1,[[["self"]],[T]]],[11,R[18],E,E,1,[[["self"]],[R[20]]]],[11,R[11],E,E,4,[[],["i"]]],[11,R[12],E,E,4,[[["self"]],[T]]],[11,R[13],E,E,4,[[["self"],[T]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[14],E,E,4,[[[U]],[R[17]]]],[11,R[15],E,E,4,[[],[R[17]]]],[11,R[19],E,E,4,[[["self"]],[T]]],[11,R[16],E,E,4,[[["self"]],[T]]],[11,R[18],E,E,4,[[["self"]],[R[20]]]],[11,R[11],E,E,5,[[],["i"]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[14],E,E,5,[[[U]],[R[17]]]],[11,R[15],E,E,5,[[],[R[17]]]],[11,R[19],E,E,5,[[["self"]],[T]]],[11,R[16],E,E,5,[[["self"]],[T]]],[11,R[18],E,E,5,[[["self"]],[R[20]]]],[11,R[11],E,E,6,[[],["i"]]],[11,R[12],E,E,6,[[["self"]],[T]]],[11,R[13],E,E,6,[[["self"],[T]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[14],E,E,6,[[[U]],[R[17]]]],[11,R[15],E,E,6,[[],[R[17]]]],[11,R[19],E,E,6,[[["self"]],[T]]],[11,R[16],E,E,6,[[["self"]],[T]]],[11,R[18],E,E,6,[[["self"]],[R[20]]]],[11,R[11],E,E,7,[[],["i"]]],[11,"from",E,E,7,[[[T]],[T]]],[11,"into",E,E,7,[[],[U]]],[11,R[14],E,E,7,[[[U]],[R[17]]]],[11,R[15],E,E,7,[[],[R[17]]]],[11,R[19],E,E,7,[[["self"]],[T]]],[11,R[16],E,E,7,[[["self"]],[T]]],[11,R[18],E,E,7,[[["self"]],[R[20]]]],[11,R[11],E,E,8,[[],["i"]]],[11,R[12],E,E,8,[[["self"]],[T]]],[11,R[13],E,E,8,[[["self"],[T]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[],[U]]],[11,R[14],E,E,8,[[[U]],[R[17]]]],[11,R[15],E,E,8,[[],[R[17]]]],[11,R[19],E,E,8,[[["self"]],[T]]],[11,R[16],E,E,8,[[["self"]],[T]]],[11,R[18],E,E,8,[[["self"]],[R[20]]]],[11,R[11],E,E,9,[[],["i"]]],[11,R[12],E,E,9,[[["self"]],[T]]],[11,R[13],E,E,9,[[["self"],[T]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,"into",E,E,9,[[],[U]]],[11,R[14],E,E,9,[[[U]],[R[17]]]],[11,R[15],E,E,9,[[],[R[17]]]],[11,R[19],E,E,9,[[["self"]],[T]]],[11,R[16],E,E,9,[[["self"]],[T]]],[11,R[18],E,E,9,[[["self"]],[R[20]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[14],E,E,2,[[[U]],[R[17]]]],[11,R[15],E,E,2,[[],[R[17]]]],[11,R[19],E,E,2,[[["self"]],[T]]],[11,R[16],E,E,2,[[["self"]],[T]]],[11,R[18],E,E,2,[[["self"]],[R[20]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[14],E,E,3,[[[U]],[R[17]]]],[11,R[15],E,E,3,[[],[R[17]]]],[11,R[19],E,E,3,[[["self"]],[T]]],[11,R[16],E,E,3,[[["self"]],[T]]],[11,R[18],E,E,3,[[["self"]],[R[20]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[14],E,E,0,[[[U]],[R[17]]]],[11,R[15],E,E,0,[[],[R[17]]]],[11,R[19],E,E,0,[[["self"]],[T]]],[11,R[16],E,E,0,[[["self"]],[T]]],[11,R[18],E,E,0,[[["self"]],[R[20]]]],[11,"len",E,E,4,[[["self"]],[R[6]]]],[11,"len",E,E,5,[[["self"]],[R[6]]]],[11,"len",E,E,6,[[["self"]],[R[6]]]],[11,"len",E,E,8,[[["self"]],[R[6]]]],[11,"len",E,E,9,[[["self"]],[R[6]]]],[11,"drop",E,E,1,[[["self"]]]],[11,"drop",E,E,6,[[["self"]]]],[11,R[11],E,E,1,[[],["intoiter"]]],[11,R[21],E,E,4,[[["self"]],[R[4]]]],[11,R[21],E,E,5,[[["self"]],[R[4]]]],[11,R[21],E,E,6,[[["self"]],[R[4]]]],[11,R[21],E,E,8,[[["self"]],[["k"],[R[4]]]]],[11,R[21],E,E,9,[[["self"]],[["v"],[R[4]]]]],[11,"default",E,E,1,[[],["self"]]],[11,"clone",E,E,1,[[["self"]],["self"]]],[11,"clone",E,E,4,[[["self"]],["self"]]],[11,"clone",E,E,6,[[["self"]],["self"]]],[11,"clone",E,E,8,[[["self"]],["self"]]],[11,"clone",E,E,9,[[["self"]],["self"]]],[11,R[44],E,E,1,[[["self"]],[[R[22]],[R[4],[R[22]]]]]],[11,"lt",E,E,1,[[["self"]],["bool"]]],[11,"le",E,E,1,[[["self"]],["bool"]]],[11,"ge",E,E,1,[[["self"]],["bool"]]],[11,"gt",E,E,1,[[["self"]],["bool"]]],[11,"extend",E,E,1,[[["self"],[R[23]]]]],[11,"extend",E,E,1,[[["self"],[R[23]]]]],[11,"eq",E,E,1,[[["self"]],["bool"]]],[11,"next",E,E,4,[[["self"]],[R[4]]]],[11,R[24],E,E,4,[[["self"]]]],[11,"next",E,E,5,[[["self"]],[R[4]]]],[11,R[24],E,E,5,[[["self"]]]],[11,"next",E,E,6,[[["self"]],[R[4]]]],[11,R[24],E,E,6,[[["self"]]]],[11,"next",E,E,7,[[["self"]],[[R[4],[R[25]]],[R[25]]]]],[11,R[24],E,E,7,[[["self"]]]],[11,"next",E,E,8,[[["self"]],[["k"],[R[4]]]]],[11,R[24],E,E,8,[[["self"]]]],[11,"next",E,E,9,[[["self"]],[["v"],[R[4]]]]],[11,R[24],E,E,9,[[["self"]]]],[11,"cmp",E,E,1,[[["self"]],[R[22]]]],[11,"hash",E,E,1,[[["self"],["h"]]]],[11,"fmt",E,"Returns a string that lists the key-value pairs in…",1,[[["self"],[R[45]]],[R[17]]]],[11,"index",E,E,1,[[["self"],["q"]],["v"]]],[11,"index_mut",E,E,1,[[["self"],["q"]],["v"]]],[11,"from_iter",E,E,1,[[[R[23]]],["self"]]]],"p":[[4,"Entry"],[3,R[26]],[3,R[27]],[3,R[28]],[3,"Iter"],[3,"IterMut"],[3,R[29]],[3,"Entries"],[3,"Keys"],[3,"Values"]]};
searchIndex["log"]={"doc":"A lightweight logging facade.","i":[[3,"Record","log","The \"payload\" of a log message.",N,N],[3,R[48],E,"Builder for `Record`.",N,N],[3,R[49],E,"Metadata about a log message.",N,N],[3,R[50],E,"Builder for `Metadata`.",N,N],[3,R[51],E,"The type returned by [`set_logger`] if [`set_logger`] has…",N,N],[3,R[52],E,"The type returned by [`from_str`] when the string doesn't…",N,N],[4,"Level",E,"An enum representing the available verbosity levels of the…",N,N],[13,"Error",E,"The \"error\" level.",0,N],[13,"Warn",E,"The \"warn\" level.",0,N],[13,"Info",E,"The \"info\" level.",0,N],[13,"Debug",E,"The \"debug\" level.",0,N],[13,"Trace",E,"The \"trace\" level.",0,N],[4,R[47],E,"An enum representing the available verbosity level filters…",N,N],[13,"Off",E,"A level lower than all log levels.",1,N],[13,"Error",E,"Corresponds to the `Error` log level.",1,N],[13,"Warn",E,"Corresponds to the `Warn` log level.",1,N],[13,"Info",E,"Corresponds to the `Info` log level.",1,N],[13,"Debug",E,"Corresponds to the `Debug` log level.",1,N],[13,"Trace",E,"Corresponds to the `Trace` log level.",1,N],[5,"set_max_level",E,"Sets the global maximum log level.",N,[[[R[30]]]]],[5,"max_level",E,"Returns the current maximum log level.",N,[[],[R[30]]]],[5,"set_logger",E,"Sets the global logger to a `&'static Log`.",N,[[["log"]],[[R[17],[R[31]]],[R[31]]]]],[5,"set_logger_racy",E,"A thread-unsafe version of [`set_logger`].",N,[[["log"]],[[R[17],[R[31]]],[R[31]]]]],[5,"logger",E,"Returns a reference to the logger.",N,[[],["log"]]],[17,"STATIC_MAX_LEVEL",E,"The statically resolved maximum log level.",N,N],[8,"Log",E,"A trait encapsulating the operations required of a logger.",N,N],[10,"enabled",E,"Determines if a log message with the specified metadata…",2,[[["self"],[R[32]]],["bool"]]],[10,"log",E,"Logs the `Record`.",2,[[["self"],["record"]]]],[10,"flush",E,"Flushes any buffered records.",2,[[["self"]]]],[11,"max",E,"Returns the most verbose logging level.",0,[[],["level"]]],[11,"to_level_filter",E,"Converts the `Level` to the equivalent `LevelFilter`.",0,[[["self"]],[R[30]]]],[11,"max",E,"Returns the most verbose logging level filter.",1,[[],[R[30]]]],[11,"to_level",E,"Converts `self` to the equivalent `Level`.",1,[[["self"]],[["level"],[R[4],["level"]]]]],[11,"builder",E,R[39],3,[[],[R[34]]]],[11,"args",E,"The message body.",3,[[["self"]],[R[35]]]],[11,R[32],E,"Metadata about the log directive.",3,[[["self"]],[R[32]]]],[11,"level",E,R[40],3,[[["self"]],["level"]]],[11,"target",E,R[41],3,[[["self"]],["str"]]],[11,R[36],E,"The module path of the message.",3,[[["self"]],[["str"],[R[4],["str"]]]]],[11,R[37],E,R[33],3,[[["self"]],[[R[4],["str"]],["str"]]]],[11,"file",E,"The source file containing the message.",3,[[["self"]],[["str"],[R[4],["str"]]]]],[11,R[38],E,R[33],3,[[["self"]],[[R[4],["str"]],["str"]]]],[11,"line",E,"The line containing the message.",3,[[["self"]],[["u32"],[R[4],["u32"]]]]],[11,"new",E,"Construct new `RecordBuilder`.",4,[[],[R[34]]]],[11,"args",E,"Set `args`.",4,[[["self"],[R[35]]],[R[34]]]],[11,R[32],E,"Set `metadata`. Construct a `Metadata` object with…",4,[[["self"],[R[32]]],[R[34]]]],[11,"level",E,"Set `Metadata::level`.",4,[[["self"],["level"]],[R[34]]]],[11,"target",E,"Set `Metadata::target`",4,[[["self"],["str"]],[R[34]]]],[11,R[36],E,"Set `module_path`",4,[[["self"],[R[4],["str"]],["str"]],[R[34]]]],[11,R[37],E,"Set `module_path` to a `'static` string",4,[[["self"],[R[4],["str"]],["str"]],[R[34]]]],[11,"file",E,"Set `file`",4,[[["self"],[R[4],["str"]],["str"]],[R[34]]]],[11,R[38],E,"Set `file` to a `'static` string.",4,[[["self"],[R[4],["str"]],["str"]],[R[34]]]],[11,"line",E,"Set `line`",4,[[["self"],["u32"],[R[4],["u32"]]],[R[34]]]],[11,"build",E,"Invoke the builder and return a `Record`",4,[[["self"]],["record"]]],[11,"builder",E,R[39],5,[[],[R[42]]]],[11,"level",E,R[40],5,[[["self"]],["level"]]],[11,"target",E,R[41],5,[[["self"]],["str"]]],[11,"new",E,"Construct a new `MetadataBuilder`.",6,[[],[R[42]]]],[11,"level",E,"Setter for `level`.",6,[[["self"],["level"]],[R[42]]]],[11,"target",E,"Setter for `target`.",6,[[["self"],["str"]],[R[42]]]],[11,"build",E,"Returns a `Metadata` object.",6,[[["self"]],[R[32]]]],[14,"log",E,"The standard logging macro.",N,N],[14,"error",E,"Logs a message at the error level.",N,N],[14,"warn",E,"Logs a message at the warn level.",N,N],[14,"info",E,"Logs a message at the info level.",N,N],[14,"debug",E,"Logs a message at the debug level.",N,N],[14,"trace",E,"Logs a message at the trace level.",N,N],[14,"log_enabled",E,"Determines if a message logged at the specified level in…",N,N],[11,R[14],E,E,3,[[[U]],[R[17]]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[15],E,E,3,[[],[R[17]]]],[11,R[19],E,E,3,[[["self"]],[T]]],[11,R[16],E,E,3,[[["self"]],[T]]],[11,R[18],E,E,3,[[["self"]],[R[20]]]],[11,R[14],E,E,4,[[[U]],[R[17]]]],[11,"into",E,E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[15],E,E,4,[[],[R[17]]]],[11,R[19],E,E,4,[[["self"]],[T]]],[11,R[16],E,E,4,[[["self"]],[T]]],[11,R[18],E,E,4,[[["self"]],[R[20]]]],[11,R[14],E,E,5,[[[U]],[R[17]]]],[11,"into",E,E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[15],E,E,5,[[],[R[17]]]],[11,R[19],E,E,5,[[["self"]],[T]]],[11,R[16],E,E,5,[[["self"]],[T]]],[11,R[18],E,E,5,[[["self"]],[R[20]]]],[11,R[14],E,E,6,[[[U]],[R[17]]]],[11,"into",E,E,6,[[],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[15],E,E,6,[[],[R[17]]]],[11,R[19],E,E,6,[[["self"]],[T]]],[11,R[16],E,E,6,[[["self"]],[T]]],[11,R[18],E,E,6,[[["self"]],[R[20]]]],[11,R[14],E,E,7,[[[U]],[R[17]]]],[11,"into",E,E,7,[[],[U]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[15],E,E,7,[[],[R[17]]]],[11,R[19],E,E,7,[[["self"]],[T]]],[11,R[16],E,E,7,[[["self"]],[T]]],[11,R[18],E,E,7,[[["self"]],[R[20]]]],[11,R[14],E,E,8,[[[U]],[R[17]]]],[11,"into",E,E,8,[[],[U]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[15],E,E,8,[[],[R[17]]]],[11,R[19],E,E,8,[[["self"]],[T]]],[11,R[16],E,E,8,[[["self"]],[T]]],[11,R[18],E,E,8,[[["self"]],[R[20]]]],[11,R[14],E,E,0,[[[U]],[R[17]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[15],E,E,0,[[],[R[17]]]],[11,R[19],E,E,0,[[["self"]],[T]]],[11,R[16],E,E,0,[[["self"]],[T]]],[11,R[18],E,E,0,[[["self"]],[R[20]]]],[11,R[14],E,E,1,[[[U]],[R[17]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[15],E,E,1,[[],[R[17]]]],[11,R[19],E,E,1,[[["self"]],[T]]],[11,R[16],E,E,1,[[["self"]],[T]]],[11,R[18],E,E,1,[[["self"]],[R[20]]]],[11,"eq",E,E,0,[[["self"],["level"]],["bool"]]],[11,"eq",E,E,0,[[["self"],[R[30]]],["bool"]]],[11,"eq",E,E,1,[[["self"],[R[30]]],["bool"]]],[11,"eq",E,E,1,[[["self"],["level"]],["bool"]]],[11,"eq",E,E,5,[[["self"],[R[32]]],["bool"]]],[11,"ne",E,E,5,[[["self"],[R[32]]],["bool"]]],[11,"eq",E,E,6,[[["self"],[R[42]]],["bool"]]],[11,"ne",E,E,6,[[["self"],[R[42]]],["bool"]]],[11,"eq",E,E,8,[[["self"],[R[43]]],["bool"]]],[11,"ne",E,E,8,[[["self"],[R[43]]],["bool"]]],[11,"cmp",E,E,0,[[["self"],["level"]],[R[22]]]],[11,"cmp",E,E,1,[[["self"],[R[30]]],[R[22]]]],[11,"cmp",E,E,5,[[["self"],[R[32]]],[R[22]]]],[11,"cmp",E,E,6,[[["self"],[R[42]]],[R[22]]]],[11,R[44],E,E,0,[[["self"],["level"]],[[R[4],[R[22]]],[R[22]]]]],[11,"lt",E,E,0,[[["self"],["level"]],["bool"]]],[11,"le",E,E,0,[[["self"],["level"]],["bool"]]],[11,"gt",E,E,0,[[["self"],["level"]],["bool"]]],[11,"ge",E,E,0,[[["self"],["level"]],["bool"]]],[11,R[44],E,E,0,[[["self"],[R[30]]],[[R[4],[R[22]]],[R[22]]]]],[11,"lt",E,E,0,[[["self"],[R[30]]],["bool"]]],[11,"le",E,E,0,[[["self"],[R[30]]],["bool"]]],[11,"gt",E,E,0,[[["self"],[R[30]]],["bool"]]],[11,"ge",E,E,0,[[["self"],[R[30]]],["bool"]]],[11,R[44],E,E,1,[[["self"],[R[30]]],[[R[4],[R[22]]],[R[22]]]]],[11,"lt",E,E,1,[[["self"],[R[30]]],["bool"]]],[11,"le",E,E,1,[[["self"],[R[30]]],["bool"]]],[11,"gt",E,E,1,[[["self"],[R[30]]],["bool"]]],[11,"ge",E,E,1,[[["self"],[R[30]]],["bool"]]],[11,R[44],E,E,1,[[["self"],["level"]],[[R[4],[R[22]]],[R[22]]]]],[11,"lt",E,E,1,[[["self"],["level"]],["bool"]]],[11,"le",E,E,1,[[["self"],["level"]],["bool"]]],[11,"gt",E,E,1,[[["self"],["level"]],["bool"]]],[11,"ge",E,E,1,[[["self"],["level"]],["bool"]]],[11,R[44],E,E,5,[[["self"],[R[32]]],[[R[22]],[R[4],[R[22]]]]]],[11,"lt",E,E,5,[[["self"],[R[32]]],["bool"]]],[11,"le",E,E,5,[[["self"],[R[32]]],["bool"]]],[11,"gt",E,E,5,[[["self"],[R[32]]],["bool"]]],[11,"ge",E,E,5,[[["self"],[R[32]]],["bool"]]],[11,R[44],E,E,6,[[["self"],[R[42]]],[[R[22]],[R[4],[R[22]]]]]],[11,"lt",E,E,6,[[["self"],[R[42]]],["bool"]]],[11,"le",E,E,6,[[["self"],[R[42]]],["bool"]]],[11,"gt",E,E,6,[[["self"],[R[42]]],["bool"]]],[11,"ge",E,E,6,[[["self"],[R[42]]],["bool"]]],[11,"hash",E,E,0,[[["self"],["__h"]]]],[11,"hash",E,E,1,[[["self"],["__h"]]]],[11,"hash",E,E,5,[[["self"],["__h"]]]],[11,"hash",E,E,6,[[["self"],["__h"]]]],[11,"fmt",E,E,0,[[["self"],[R[45]]],[R[17]]]],[11,"fmt",E,E,1,[[["self"],[R[45]]],[R[17]]]],[11,"fmt",E,E,7,[[["self"],[R[45]]],[R[17]]]],[11,"fmt",E,E,8,[[["self"],[R[45]]],[R[17]]]],[11,"fmt",E,E,0,[[["self"],[R[45]]],[R[17]]]],[11,"fmt",E,E,1,[[["self"],[R[45]]],[R[17]]]],[11,"fmt",E,E,3,[[["self"],[R[45]]],[R[17]]]],[11,"fmt",E,E,4,[[["self"],[R[45]]],[R[17]]]],[11,"fmt",E,E,5,[[["self"],[R[45]]],[R[17]]]],[11,"fmt",E,E,6,[[["self"],[R[45]]],[R[17]]]],[11,"fmt",E,E,7,[[["self"],[R[45]]],[R[17]]]],[11,"fmt",E,E,8,[[["self"],[R[45]]],[R[17]]]],[11,R[46],E,E,0,[[["str"]],[["level"],[R[17],["level"]]]]],[11,R[46],E,E,1,[[["str"]],[[R[17],[R[30]]],[R[30]]]]],[11,"clone",E,E,0,[[["self"]],["level"]]],[11,"clone",E,E,1,[[["self"]],[R[30]]]],[11,"clone",E,E,3,[[["self"]],["record"]]],[11,"clone",E,E,5,[[["self"]],[R[32]]]]],"p":[[4,"Level"],[4,R[47]],[8,"Log"],[3,"Record"],[3,R[48]],[3,R[49]],[3,R[50]],[3,R[51]],[3,R[52]]]};
searchIndex["yaml_rust"]={"doc":"YAML 1.2 implementation in pure Rust.","i":[[0,"emitter",R[53],E,N,N],[3,R[73],R[63],E,N,N],[4,R[72],E,E,N,N],[13,"FmtError",E,E,0,N],[13,"BadHashmapKey",E,E,0,N],[6,"EmitResult",E,E,N,N],[11,"new",E,E,1,[[["write"]],["yamlemitter"]]],[11,"compact",E,"Set 'compact inline notation' on or off, as described for…",1,[[["self"],["bool"]]]],[11,"is_compact",E,"Determine if this emitter is using 'compact inline…",1,[[["self"]],["bool"]]],[11,"dump",E,E,1,[[["self"],["yaml"]],["emitresult"]]],[0,"parser",R[53],E,N,N],[3,"Parser",R[64],E,N,N],[4,"Event",E,"`Event` is used with the low-level event base parsing API,…",N,N],[13,"Nothing",E,"Reserved for internal use",2,N],[13,R[57],E,E,2,N],[13,R[58],E,E,2,N],[13,R[59],E,E,2,N],[13,R[60],E,E,2,N],[13,"Alias",E,"Refer to an anchor ID",2,N],[13,"Scalar",E,"Value, style, anchor_id, tag",2,N],[13,"SequenceStart",E,R[54],2,N],[13,"SequenceEnd",E,E,2,N],[13,"MappingStart",E,R[54],2,N],[13,"MappingEnd",E,E,2,N],[6,"ParseResult",E,E,N,N],[8,R[74],E,E,N,N],[10,R[55],E,E,3,[[["self"],["event"]]]],[8,R[75],E,E,N,N],[10,R[55],E,E,4,[[["self"],["event"],[R[61]]]]],[11,"new",E,E,5,[[[T]],["parser"]]],[11,"peek",E,E,5,[[["self"]],[[R[17],[R[56]]],[R[56]]]]],[11,"next",E,E,5,[[["self"]],["parseresult"]]],[11,"load",E,E,5,[[["self"],["r"],["bool"]],[[R[56]],[R[17],[R[56]]]]]],[0,"scanner",R[53],E,N,N],[3,"Marker",R[65],E,N,N],[3,R[79],E,E,N,N],[3,"Token",E,E,N,N],[12,"0",E,E,6,N],[12,"1",E,E,6,N],[3,"Scanner",E,E,N,N],[4,R[76],E,E,N,N],[13,"Utf8",E,E,7,N],[4,R[77],E,E,N,N],[13,"Any",E,E,8,N],[13,"Plain",E,E,8,N],[13,"SingleQuoted",E,E,8,N],[13,"DoubleQuoted",E,E,8,N],[13,"Literal",E,E,8,N],[13,"Foled",E,E,8,N],[4,R[78],E,E,N,N],[13,"NoToken",E,E,9,N],[13,R[57],E,E,9,N],[13,R[58],E,E,9,N],[13,"VersionDirective",E,"major, minor",9,N],[13,"TagDirective",E,"handle, prefix",9,N],[13,R[59],E,E,9,N],[13,R[60],E,E,9,N],[13,"BlockSequenceStart",E,E,9,N],[13,"BlockMappingStart",E,E,9,N],[13,"BlockEnd",E,E,9,N],[13,"FlowSequenceStart",E,E,9,N],[13,"FlowSequenceEnd",E,E,9,N],[13,"FlowMappingStart",E,E,9,N],[13,"FlowMappingEnd",E,E,9,N],[13,"BlockEntry",E,E,9,N],[13,"FlowEntry",E,E,9,N],[13,"Key",E,E,9,N],[13,"Value",E,E,9,N],[13,"Alias",E,E,9,N],[13,"Anchor",E,E,9,N],[13,"Tag",E,"handle, suffix",9,N],[13,"Scalar",E,E,9,N],[6,"ScanResult",E,E,N,N],[11,"index",E,E,10,[[["self"]],[R[6]]]],[11,"line",E,E,10,[[["self"]],[R[6]]]],[11,"col",E,E,10,[[["self"]],[R[6]]]],[11,"new",E,E,11,[[[R[61]],["str"]],[R[56]]]],[11,R[61],E,E,11,[[["self"]],[R[61]]]],[11,"new",E,"Creates the YAML tokenizer.",12,[[[T]],["scanner"]]],[11,"get_error",E,E,12,[[["self"]],[[R[56]],[R[4],[R[56]]]]]],[11,"stream_started",E,E,12,[[["self"]],["bool"]]],[11,"stream_ended",E,E,12,[[["self"]],["bool"]]],[11,"mark",E,E,12,[[["self"]],[R[61]]]],[11,"fetch_next_token",E,E,12,[[["self"]],[R[62]]]],[11,"next_token",E,E,12,[[["self"]],[[R[17],[R[4],R[56]]],[R[56]],[R[4],["token"]]]]],[11,"fetch_more_tokens",E,E,12,[[["self"]],[R[62]]]],[0,"yaml",R[53],E,N,N],[3,R[80],R[67],E,N,N],[3,R[81],E,E,N,N],[4,"Yaml",E,"A YAML node is stored as this `Yaml` enumeration, which…",N,N],[13,"Real",E,"Float types are stored as String and parsed on demand.…",13,N],[13,"Integer",E,"YAML int is stored as i64.",13,N],[13,"String",E,"YAML scalar.",13,N],[13,"Boolean",E,"YAML bool, e.g. `true` or `false`.",13,N],[13,"Array",E,"YAML array, can be accessed as a `Vec`.",13,N],[13,"Hash",E,"YAML hash, can be accessed as a `LinkedHashMap`.",13,N],[13,"Alias",E,"Alias, not fully supported yet.",13,N],[13,"Null",E,"YAML null, e.g. `null` or `~`.",13,N],[13,"BadValue",E,"Accessing a nonexistent node via the Index trait returns…",13,N],[6,"Array",E,E,N,N],[6,"Hash",E,E,N,N],[11,"load_from_str",E,E,14,[[["str"]],[[R[17],["vec",R[56]]],[R[56]],["vec",["yaml"]]]]],[11,"as_bool",E,E,13,[[["self"]],[[R[4],["bool"]],["bool"]]]],[11,"as_i64",E,E,13,[[["self"]],[["i64"],[R[4],["i64"]]]]],[11,"as_str",E,E,13,[[["self"]],[[R[4],["str"]],["str"]]]],[11,"as_hash",E,E,13,[[["self"]],[["hash"],[R[4],["hash"]]]]],[11,"as_vec",E,E,13,[[["self"]],[["array"],[R[4],["array"]]]]],[11,"into_bool",E,E,13,[[],[[R[4],["bool"]],["bool"]]]],[11,"into_i64",E,E,13,[[],[["i64"],[R[4],["i64"]]]]],[11,"into_string",E,E,13,[[],[[R[86]],[R[4],[R[86]]]]]],[11,"into_hash",E,E,13,[[],[[R[4],["hash"]],["hash"]]]],[11,"into_vec",E,E,13,[[],[[R[4],["array"]],["array"]]]],[11,"is_null",E,E,13,[[["self"]],["bool"]]],[11,"is_badvalue",E,E,13,[[["self"]],["bool"]]],[11,"is_array",E,E,13,[[["self"]],["bool"]]],[11,"as_f64",E,E,13,[[["self"]],[[R[4],["f64"]],["f64"]]]],[11,"into_f64",E,E,13,[[],[[R[4],["f64"]],["f64"]]]],[11,R[46],E,E,13,[[["str"]],["yaml"]]],[11,"from",R[63],E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[14],E,E,1,[[[U]],[R[17]]]],[11,R[15],E,E,1,[[],[R[17]]]],[11,R[19],E,E,1,[[["self"]],[T]]],[11,R[16],E,E,1,[[["self"]],[T]]],[11,R[18],E,E,1,[[["self"]],[R[20]]]],[11,R[12],E,E,0,[[["self"]],[T]]],[11,R[13],E,E,0,[[["self"],[T]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[66],E,E,0,[[["self"]],[R[86]]]],[11,R[14],E,E,0,[[[U]],[R[17]]]],[11,R[15],E,E,0,[[],[R[17]]]],[11,R[19],E,E,0,[[["self"]],[T]]],[11,R[16],E,E,0,[[["self"]],[T]]],[11,R[18],E,E,0,[[["self"]],[R[20]]]],[11,"from",R[64],E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[14],E,E,5,[[[U]],[R[17]]]],[11,R[15],E,E,5,[[],[R[17]]]],[11,R[19],E,E,5,[[["self"]],[T]]],[11,R[16],E,E,5,[[["self"]],[T]]],[11,R[18],E,E,5,[[["self"]],[R[20]]]],[11,R[12],E,E,2,[[["self"]],[T]]],[11,R[13],E,E,2,[[["self"],[T]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[14],E,E,2,[[[U]],[R[17]]]],[11,R[15],E,E,2,[[],[R[17]]]],[11,R[19],E,E,2,[[["self"]],[T]]],[11,R[16],E,E,2,[[["self"]],[T]]],[11,R[18],E,E,2,[[["self"]],[R[20]]]],[11,R[12],R[65],E,10,[[["self"]],[T]]],[11,R[13],E,E,10,[[["self"],[T]]]],[11,"from",E,E,10,[[[T]],[T]]],[11,"into",E,E,10,[[],[U]]],[11,R[14],E,E,10,[[[U]],[R[17]]]],[11,R[15],E,E,10,[[],[R[17]]]],[11,R[19],E,E,10,[[["self"]],[T]]],[11,R[16],E,E,10,[[["self"]],[T]]],[11,R[18],E,E,10,[[["self"]],[R[20]]]],[11,R[12],E,E,11,[[["self"]],[T]]],[11,R[13],E,E,11,[[["self"],[T]]]],[11,"from",E,E,11,[[[T]],[T]]],[11,"into",E,E,11,[[],[U]]],[11,R[66],E,E,11,[[["self"]],[R[86]]]],[11,R[14],E,E,11,[[[U]],[R[17]]]],[11,R[15],E,E,11,[[],[R[17]]]],[11,R[19],E,E,11,[[["self"]],[T]]],[11,R[16],E,E,11,[[["self"]],[T]]],[11,R[18],E,E,11,[[["self"]],[R[20]]]],[11,R[12],E,E,6,[[["self"]],[T]]],[11,R[13],E,E,6,[[["self"],[T]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[14],E,E,6,[[[U]],[R[17]]]],[11,R[15],E,E,6,[[],[R[17]]]],[11,R[19],E,E,6,[[["self"]],[T]]],[11,R[16],E,E,6,[[["self"]],[T]]],[11,R[18],E,E,6,[[["self"]],[R[20]]]],[11,R[11],E,E,12,[[],["i"]]],[11,"from",E,E,12,[[[T]],[T]]],[11,"into",E,E,12,[[],[U]]],[11,R[14],E,E,12,[[[U]],[R[17]]]],[11,R[15],E,E,12,[[],[R[17]]]],[11,R[19],E,E,12,[[["self"]],[T]]],[11,R[16],E,E,12,[[["self"]],[T]]],[11,R[18],E,E,12,[[["self"]],[R[20]]]],[11,R[12],E,E,7,[[["self"]],[T]]],[11,R[13],E,E,7,[[["self"],[T]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,"into",E,E,7,[[],[U]]],[11,R[14],E,E,7,[[[U]],[R[17]]]],[11,R[15],E,E,7,[[],[R[17]]]],[11,R[19],E,E,7,[[["self"]],[T]]],[11,R[16],E,E,7,[[["self"]],[T]]],[11,R[18],E,E,7,[[["self"]],[R[20]]]],[11,R[12],E,E,8,[[["self"]],[T]]],[11,R[13],E,E,8,[[["self"],[T]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[],[U]]],[11,R[14],E,E,8,[[[U]],[R[17]]]],[11,R[15],E,E,8,[[],[R[17]]]],[11,R[19],E,E,8,[[["self"]],[T]]],[11,R[16],E,E,8,[[["self"]],[T]]],[11,R[18],E,E,8,[[["self"]],[R[20]]]],[11,R[12],E,E,9,[[["self"]],[T]]],[11,R[13],E,E,9,[[["self"],[T]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,"into",E,E,9,[[],[U]]],[11,R[14],E,E,9,[[[U]],[R[17]]]],[11,R[15],E,E,9,[[],[R[17]]]],[11,R[19],E,E,9,[[["self"]],[T]]],[11,R[16],E,E,9,[[["self"]],[T]]],[11,R[18],E,E,9,[[["self"]],[R[20]]]],[11,R[55],R[67],E,14,[[["self"],[R[61]],["event"]]]],[11,"from",E,E,14,[[[T]],[T]]],[11,"into",E,E,14,[[],[U]]],[11,R[14],E,E,14,[[[U]],[R[17]]]],[11,R[15],E,E,14,[[],[R[17]]]],[11,R[19],E,E,14,[[["self"]],[T]]],[11,R[16],E,E,14,[[["self"]],[T]]],[11,R[18],E,E,14,[[["self"]],[R[20]]]],[11,R[11],E,E,15,[[],["i"]]],[11,"from",E,E,15,[[[T]],[T]]],[11,"into",E,E,15,[[],[U]]],[11,R[14],E,E,15,[[[U]],[R[17]]]],[11,R[15],E,E,15,[[],[R[17]]]],[11,R[19],E,E,15,[[["self"]],[T]]],[11,R[16],E,E,15,[[["self"]],[T]]],[11,R[18],E,E,15,[[["self"]],[R[20]]]],[11,R[11],E,E,13,[[],["i"]]],[11,R[12],E,E,13,[[["self"]],[T]]],[11,R[13],E,E,13,[[["self"],[T]]]],[11,"from",E,E,13,[[[T]],[T]]],[11,"into",E,E,13,[[],[U]]],[11,R[14],E,E,13,[[[U]],[R[17]]]],[11,R[15],E,E,13,[[],[R[17]]]],[11,R[19],E,E,13,[[["self"]],[T]]],[11,R[16],E,E,13,[[["self"]],[T]]],[11,R[18],E,E,13,[[["self"]],[R[20]]]],[11,R[55],E,E,14,[[["self"],["event"],[R[61]]]]],[11,R[11],E,E,13,[[]]],[11,"clone",R[63],E,0,[[["self"]],["emiterror"]]],[11,"clone",R[64],E,2,[[["self"]],["event"]]],[11,"clone",R[65],E,7,[[["self"]],[R[68]]]],[11,"clone",E,E,8,[[["self"]],[R[69]]]],[11,"clone",E,E,10,[[["self"]],[R[61]]]],[11,"clone",E,E,11,[[["self"]],[R[56]]]],[11,"clone",E,E,9,[[["self"]],[R[70]]]],[11,"clone",E,E,6,[[["self"]],["token"]]],[11,"clone",R[67],E,13,[[["self"]],["yaml"]]],[11,R[44],E,E,13,[[["self"],["yaml"]],[[R[4],[R[22]]],[R[22]]]]],[11,"lt",E,E,13,[[["self"],["yaml"]],["bool"]]],[11,"le",E,E,13,[[["self"],["yaml"]],["bool"]]],[11,"gt",E,E,13,[[["self"],["yaml"]],["bool"]]],[11,"ge",E,E,13,[[["self"],["yaml"]],["bool"]]],[11,"eq",R[64],E,2,[[["self"],["event"]],["bool"]]],[11,"ne",E,E,2,[[["self"],["event"]],["bool"]]],[11,"eq",R[65],E,7,[[["self"],[R[68]]],["bool"]]],[11,"eq",E,E,8,[[["self"],[R[69]]],["bool"]]],[11,"eq",E,E,10,[[["self"],[R[61]]],["bool"]]],[11,"ne",E,E,10,[[["self"],[R[61]]],["bool"]]],[11,"eq",E,E,11,[[["self"],[R[56]]],["bool"]]],[11,"ne",E,E,11,[[["self"],[R[56]]],["bool"]]],[11,"eq",E,E,9,[[["self"],[R[70]]],["bool"]]],[11,"ne",E,E,9,[[["self"],[R[70]]],["bool"]]],[11,"eq",E,E,6,[[["self"],["token"]],["bool"]]],[11,"ne",E,E,6,[[["self"],["token"]],["bool"]]],[11,"eq",R[67],E,13,[[["self"],["yaml"]],["bool"]]],[11,"ne",E,E,13,[[["self"],["yaml"]],["bool"]]],[11,"from",R[63],E,0,[[["error"]],["self"]]],[11,"next",R[65],E,12,[[["self"]],[["token"],[R[4],["token"]]]]],[11,"next",R[67],E,15,[[["self"]],[[R[4],["yaml"]],["yaml"]]]],[11,"cmp",E,E,13,[[["self"],["yaml"]],[R[22]]]],[11,"hash",E,E,13,[[["self"],["__h"]]]],[11,"fmt",R[63],E,0,[[["self"],[R[45]]],[R[17]]]],[11,"fmt",R[65],E,11,[[["self"],[R[45]]],[R[17]]]],[11,"fmt",R[63],E,0,[[["self"],[R[45]]],[R[17]]]],[11,"fmt",R[64],E,2,[[["self"],[R[45]]],[R[17]]]],[11,"fmt",E,E,5,[[["self"],[R[45]]],[R[17]]]],[11,"fmt",R[65],E,7,[[["self"],[R[45]]],[R[17]]]],[11,"fmt",E,E,8,[[["self"],[R[45]]],[R[17]]]],[11,"fmt",E,E,10,[[["self"],[R[45]]],[R[17]]]],[11,"fmt",E,E,11,[[["self"],[R[45]]],[R[17]]]],[11,"fmt",E,E,9,[[["self"],[R[45]]],[R[17]]]],[11,"fmt",E,E,6,[[["self"],[R[45]]],[R[17]]]],[11,"fmt",E,E,12,[[["self"],[R[45]]],[R[17]]]],[11,"fmt",R[67],E,13,[[["self"],[R[45]]],[R[17]]]],[11,"index",E,E,13,[[["self"],["str"]],["yaml"]]],[11,"index",E,E,13,[[["self"],[R[6]]],["yaml"]]],[11,R[71],R[63],E,0,[[["self"]],["str"]]],[11,"cause",E,E,0,[[["self"]],[["error"],[R[4],["error"]]]]],[11,R[71],R[65],E,11,[[["self"]],["str"]]],[11,"cause",E,E,11,[[["self"]],[["error"],[R[4],["error"]]]]]],"p":[[4,R[72]],[3,R[73]],[4,"Event"],[8,R[74]],[8,R[75]],[3,"Parser"],[3,"Token"],[4,R[76]],[4,R[77]],[4,R[78]],[3,"Marker"],[3,R[79]],[3,"Scanner"],[4,"Yaml"],[3,R[80]],[3,R[81]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);